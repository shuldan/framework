name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run linter
        run: |
          $(go env GOPATH)/bin/golangci-lint run --config .golangci-lint.yaml ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          REDIS_URL: redis://localhost:6379

      - name: Check test coverage
        run: |
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
            echo "Coverage $COVERAGE% is below minimum 80%"
            exit 1
          fi

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
        if: github.ref == 'refs/heads/main'

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build
        run: go build -v ./...

      - name: Test build examples
        run: |
          mkdir -p examples/basic
          cd examples/basic
          go mod init example
          go mod edit -replace github.com/shuldan/framework=../..
          cat > main.go << 'EOF'
          package main
          
          import (
              "log"
              "time"
              "github.com/shuldan/framework/pkg/app"
              "github.com/shuldan/framework/pkg/cli"
              "github.com/shuldan/framework/pkg/logger"
          )
          
          func main() {
              application := app.New(
                  app.AppInfo{
                      AppName:     "example",
                      Version:     "1.0.0", 
                      Environment: "development",
                  },
                  nil,
                  nil,
                  app.WithGracefulTimeout(time.Second),
              )
              
              if err := application.Register(logger.NewModule()); err != nil {
                  log.Fatal(err)
              }
              
              if err := application.Register(cli.NewModule()); err != nil {
                  log.Fatal(err)
              }
              
              log.Println("Example compiled successfully")
          }
          EOF
          go mod tidy
          go build -o example .